From 11091cb4f715e90571e43eff8389ba764dcd1a73 Mon Sep 17 00:00:00 2001
From: Joerg Hofrichter <joerg.hofrichter@ni.com>
Date: Thu, 2 May 2024 08:54:50 +0200
Subject: [PATCH 1/2] mpm: rpc_server: cast get_device_info/get_mbeeprom params
 to n/a

ensure the map contains only string values otherwise it cannot be
casted to std::map<string, string> in C++
---
 mpm/python/usrp_mpm/periph_manager/e31x.py |  4 ++--
 mpm/python/usrp_mpm/periph_manager/e320.py |  4 ++--
 mpm/python/usrp_mpm/periph_manager/n3xx.py |  4 ++--
 mpm/python/usrp_mpm/rpc_server.py          | 15 ++++++++++++++-
 4 files changed, 20 insertions(+), 7 deletions(-)

diff --git a/mpm/python/usrp_mpm/periph_manager/e31x.py b/mpm/python/usrp_mpm/periph_manager/e31x.py
index 551ed5333..4690ba1be 100644
--- a/mpm/python/usrp_mpm/periph_manager/e31x.py
+++ b/mpm/python/usrp_mpm/periph_manager/e31x.py
@@ -16,7 +16,7 @@ from usrp_mpm.dboard_manager import E31x_db
 from usrp_mpm.gpsd_iface import GPSDIfaceExtension
 from usrp_mpm.mpmutils import assert_compat_number, str2bool
 from usrp_mpm.periph_manager import PeriphManagerBase
-from usrp_mpm.rpc_server import no_rpc
+from usrp_mpm.rpc_server import no_rpc, _get_map_for_rpc
 from usrp_mpm.sys_utils import dtoverlay
 from usrp_mpm.sys_utils.sysfs_thermal import read_sysfs_sensors_value
 from usrp_mpm.sys_utils.udev import get_spidev_nodes
@@ -696,7 +696,7 @@ class e31x(ZynqComponents, PeriphManagerBase):
         mboard info again. This filters the EEPROM contents to what we think
         the user wants to know/see.
         """
-        return self.mboard_info
+        return _get_map_for_rpc(self.mboard_info, self.log)
 
     def set_mb_eeprom(self, _eeprom_vals):
         """
diff --git a/mpm/python/usrp_mpm/periph_manager/e320.py b/mpm/python/usrp_mpm/periph_manager/e320.py
index 7aa6586ff..e3522ef83 100644
--- a/mpm/python/usrp_mpm/periph_manager/e320.py
+++ b/mpm/python/usrp_mpm/periph_manager/e320.py
@@ -18,7 +18,7 @@ from usrp_mpm.dboard_manager import Neon
 from usrp_mpm.gpsd_iface import GPSDIfaceExtension
 from usrp_mpm.mpmutils import assert_compat_number, str2bool
 from usrp_mpm.periph_manager import PeriphManagerBase
-from usrp_mpm.rpc_server import no_rpc
+from usrp_mpm.rpc_server import no_rpc, _get_map_for_rpc
 from usrp_mpm.sys_utils import dtoverlay
 from usrp_mpm.sys_utils.sysfs_thermal import read_thermal_sensor_value, read_thermal_sensors_value
 from usrp_mpm.sys_utils.udev import get_spidev_nodes
@@ -647,7 +647,7 @@ class e320(ZynqComponents, PeriphManagerBase):
         mboard info again. This filters the EEPROM contents to what we think
         the user wants to know/see.
         """
-        return self.mboard_info
+        return _get_map_for_rpc(self.mboard_info, self.log)
 
     def set_mb_eeprom(self, eeprom_vals):
         """
diff --git a/mpm/python/usrp_mpm/periph_manager/n3xx.py b/mpm/python/usrp_mpm/periph_manager/n3xx.py
index 1da1f1e5d..7f481a68f 100644
--- a/mpm/python/usrp_mpm/periph_manager/n3xx.py
+++ b/mpm/python/usrp_mpm/periph_manager/n3xx.py
@@ -18,7 +18,7 @@ from usrp_mpm.components import ZynqComponents
 from usrp_mpm.gpsd_iface import GPSDIfaceExtension
 from usrp_mpm.periph_manager import PeriphManagerBase
 from usrp_mpm.mpmutils import assert_compat_number, str2bool, poll_with_timeout
-from usrp_mpm.rpc_server import no_rpc
+from usrp_mpm.rpc_server import no_rpc, _get_map_for_rpc
 from usrp_mpm.sys_utils import dtoverlay
 from usrp_mpm.sys_utils import i2c_dev
 from usrp_mpm.sys_utils.sysfs_thermal import read_thermal_sensor_value
@@ -927,7 +927,7 @@ class n3xx(ZynqComponents, PeriphManagerBase):
         mboard info again. This filters the EEPROM contents to what we think
         the user wants to know/see.
         """
-        return self.mboard_info
+        return _get_map_for_rpc(self.mboard_info, self.log)
 
     def get_db_eeprom(self, dboard_idx):
         """
diff --git a/mpm/python/usrp_mpm/rpc_server.py b/mpm/python/usrp_mpm/rpc_server.py
index 04b4433b8..a9d607d43 100644
--- a/mpm/python/usrp_mpm/rpc_server.py
+++ b/mpm/python/usrp_mpm/rpc_server.py
@@ -442,7 +442,7 @@ class MPMServer(RPCServer):
         get device information
         This is as safe method which can be called without a claim on the device
         """
-        info = self.periph_manager.get_device_info()
+        info = _get_map_for_rpc(self.periph_manager.get_device_info(), self.log)
         info["mpm_version"] = "{}.{}".format(*MPM_COMPAT_NUM)
         if _is_connection_local(self.client_host):
             info["connection"] = "local"
@@ -654,3 +654,16 @@ def spawn_rpc_process(state, udp_port, default_args):
     )
     proc.start()
     return proc
+
+
+def _get_map_for_rpc(map, log):
+    """
+    ensure the map contains only string values otherwise it cannot be
+    casted to std::map<string, string> in C++
+    # TODO reconsider the workaround once we transition away from mprpc
+    """
+    for key, value in map.items():
+        if value is None:
+            log.warning('casting parameter "{}" from None to "n/a"'.format(key))
+            map[key] = "n/a"
+    return map
-- 
2.34.1

