trigger:
  branches:
    include:
      - kirkstone
pr:
  branches:
    include:
      - kirkstone

schedules:
  - cron: "19 10 * * *"
    displayName: 'Daily build'
    branches:
      include:
        - kirkstone
    always: true

parameters:
  - name: release_build
    displayName: Build for release (disables caching, publishes archives)
    type: boolean
    default: false
  - name: upload_packages_to_fileserver
    displayName: "Upload packages to fileserver"
    type: boolean
    default: false
  - name: use_custom_mender_prefix
    type: boolean
    default: false
  - name: custom_mender_prefix
    type: string
    default: 'meta-ettus-fs'
  - name: build_sdk
    displayName: Build SDK
    type: boolean
    default: false
  - name: cache_sstate
    displayName: Use pipeline caching for sstate-cache
    type: boolean
    default: true
  - name: cache_downloads
    displayName: Use pipeline caching for downloads
    type: boolean
    default: false
  - name: ext_linux
    displayName: Override linux source
    type: boolean
    default: false
  - name: ext_uhd
    displayName: Override UHD source
    type: boolean
    default: true
  - name: ext_fpga
    displayName: Override FPGA sources
    type: boolean
    default: true
  - name: build_e310_sg1
    displayName: Build e310_sg1
    type: boolean
    default: true
  - name: build_e310_sg3
    displayName: Build e310_sg3
    type: boolean
    default: true
  - name: build_e320
    displayName: Build e320
    type: boolean
    default: true
  - name: build_n3xx
    displayName: Build n3xx
    type: boolean
    default: true
  - name: build_x4xx
    displayName: Build x4xx
    type: boolean
    default: true
  - name: build_default_targets
    displayName: Build default targets
    type: boolean
    default: true
  - name: kas_subdirectory
    displayName: KAS subdirectory
    type: string
    default: configs-mender
    values:
    - configs-mender
    - configs-standard
    - configs-poky
  - name: image
    type: string
    default: gnuradio-image
    values:
    - deployment-image
    - developer-image
    - gnuradio-image
  - name: flash_image
    type: boolean
    default: true

resources:
  pipelines:
    - pipeline: usrp-kas-pipeline
      source: 'usrp-kas'
      branch: kirkstone
    - pipeline: uhddev-fpga-pipeline
      source: 'uhddev fpga pipeline'
      branch: master
    - pipeline: usrp-filesystem-pipeline
      source: 'usrp-filesystem'
      branch: kirkstone
  repositories:
    - repository: linuxdev
      type: github
      name: EttusResearch/linuxdev
      ref: refs/heads/usrp-v5.10
      endpoint: EttusResearch
    - repository: uhddev
      type: github
      name: EttusResearch/uhddev
      ref: refs/heads/master
      endpoint: EttusResearch
    - repository: ettus-rts
      type: github
      name: EttusResearch/ettus-rts
      ref: refs/heads/labgrid
      endpoint: EttusResearch
    - repository: labgrid
      type: github
      name: joergho/labgrid
      branch: master-ettus
      endpoint: EttusResearch

variables:
  - name: AUTO_CONF
    value: $(Agent.BuildDirectory)/auto.conf
stages:
- stage: build_meta_ettus
  displayName: Build meta-ettus
  dependsOn: []
  jobs:
    - template: templates/job_build_filesystem.yml
      parameters:
        upload_packages_to_fileserver: ${{ parameters.upload_packages_to_fileserver }}
        build_sdk: ${{ parameters.build_sdk }}
        cache_sstate: ${{ and(parameters.cache_sstate, not(parameters.release_build)) }}
        cache_downloads: ${{ and(parameters.cache_downloads, not(parameters.release_build)) }}
        use_custom_mender_prefix: ${{ parameters.use_custom_mender_prefix }}
        custom_mender_prefix: ${{ parameters.custom_mender_prefix }}
        machines:
          ${{ if parameters.build_e310_sg1 }}:
            e310_sg1:
              machineName: e310_sg1
          ${{ if parameters.build_e310_sg3 }}:
            e310_sg3:
              machineName: e310_sg3
          ${{ if parameters.build_e320 }}:
            e320:
              machineName: e320
          ${{ if parameters.build_n3xx }}:
            n3xx:
              machineName: n3xx
          ${{ if parameters.build_x4xx }}:
            x4xx:
              machineName: x4xx
        auto_conf: $AUTO_CONF
        prebuild_steps:
          - ${{ if or(parameters.ext_linux, parameters.ext_uhd, parameters.ext_fpga) }}:
            - script: |
                rm $AUTO_CONF
                touch $AUTO_CONF
          - ${{ if parameters.ext_linux }}:
            - script: |
                cat <<EOF >>$AUTO_CONF
                PREFERRED_PROVIDER_virtual/kernel = "linux-usrp"
                PREFERRED_VERSION_linux-yocto = "5.10%"
                KBUILD_DEFCONFIG = "usrp_defconfig"
                EOF
            - template: templates/oe_localconf_externalsrc.yml
              parameters:
                conf_file: $AUTO_CONF
                repository: linuxdev
                packages:
                  - linux-usrp
          - ${{ if parameters.ext_uhd }}:
            - template: templates/oe_localconf_externalsrc.yml
              parameters:
                conf_file: $AUTO_CONF
                repository: uhddev
                package_paths:
                  - package: 'uhd'
                    path: 'host'
                  - package: 'mpmd'
                    path: 'mpm'
          - ${{ if parameters.ext_fpga }}:
            - template: templates/oe_localconf_externalsrc_pipeline.yml
              parameters:
                conf_file: $AUTO_CONF
                pipeline: uhddev-fpga-pipeline
                patterns: |
                  usrp_e310_*_fpga.*
                  usrp_e320_fpga_*.*
                  usrp_n3??_fpga_*.*
                  usrp_x4??_fpga_*.*
                packages:
                - uhd-fpga-images
                flatten: true
            - script: |
                ls -l $(Agent.BuildDirectory)/uhddev-fpga-pipeline
              displayName: list fpga images
        kas_subdirectory: ${{ parameters.kas_subdirectory }}
        build_default_targets: ${{ parameters.build_default_targets }}

- ${{ if parameters.build_x4xx }}:
  - stage: x4xx_hardware_test
    displayName: Run x4xx hardware test
    dependsOn: build_meta_ettus
    jobs:
      - template: templates/job_x4xx_filesystem_test.yml
        parameters:
          test_x4xx: ${{ parameters.build_x4xx }}
- stage: filesystem_embedded_test
  displayName: Run embedded test
  dependsOn: build_meta_ettus
  jobs:
    - template: templates/job_filesystem_embedded_test.yml
      parameters:
        machines:
          ${{ if parameters.build_e310_sg3 }}:
            e310_sg3:
              deviceType: e310_sg3
              ${{ if eq(parameters.kas_subdirectory, 'configs-mender') }}:
                machine: ni-e31x-sg3-mender
              ${{ if ne(parameters.kas_subdirectory, 'configs-mender') }}:
                machine: ni-e31x-sg3
          ${{ if parameters.build_e320 }}:
            e320:
              deviceType: e320
              ${{ if eq(parameters.kas_subdirectory, 'configs-mender') }}:
                machine: ni-neon-rev2-mender
              ${{ if ne(parameters.kas_subdirectory, 'configs-mender') }}:
                machine: ni-neon-rev2
          ${{ if parameters.build_n3xx }}:
            n3xx:
              deviceType: n3xx
              ${{ if eq(parameters.kas_subdirectory, 'configs-mender') }}:
                machine: ni-sulfur-rev11-mender
              ${{ if ne(parameters.kas_subdirectory, 'configs-mender') }}:
                machine: ni-sulfur-rev11
          ${{ if parameters.build_x4xx }}:
            x4xx:
              deviceType: x4xx
              ${{ if eq(parameters.kas_subdirectory, 'configs-mender') }}:
                machine: ni-titanium-rev5-mender
              ${{ if ne(parameters.kas_subdirectory, 'configs-mender') }}:
                machine: ni-titanium-rev5
        image: ${{ parameters.image }}
        ${{ if eq(parameters.kas_subdirectory, 'configs-mender') }}:
          image_ext: 'sdimg.bz2'
        ${{ if ne(parameters.kas_subdirectory, 'configs-mender') }}:
          image_ext: 'wic.xz'
        flash_image: ${{ parameters.flash_image }}
